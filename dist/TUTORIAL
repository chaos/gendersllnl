              Genders: a Framework for Configuration Management

                                Jim Garlick

                  High Performance Computing Systems Group
                            Livermore Computing
                   Lawrence Livermore National Laboratory

                               June 19, 2000

                     (Revised by Albert Chu - May 2003) 

Genders and Rdist

Rdist is a utility designed to install files on remote nodes.  It takes as
input a Distfile which describes how and where files are to be installed.
Rdist has been enhanced with some wrapper scripts to allow the lists of
target nodes to come from genders.  The wrapper scripts scan the Distfile for
references to specially formatted variables in which an attribute name has
been embeded.  The special formats are:

     ${attr_xyz}
     ${cluster!attr_xyz}

When the first type of variable is encountered, a variable definition is
created and set equal to the list of nodes that have the attribute xyz, or
an empty list if no nodes have the attribute.  The second form is identical
to the first if cluster is the name of the local cluster.  If not, the
definition is an empty list.

The rdist wrapper, dist2 (described below), supports the concept of an rdist
repository.  The repository is a collection of Distfiles and files to be
rdisted.  The repository is typically NFS-mounted on /var/dist, on multiple
clusters, all nodes.  For small clusters, dist2 can be run on one node, and
by default it will update all nodes in the cluster.  For larger clusters like
ASCI Blue-Pacific, dist2 -l is run in parallel on all the target nodes for
performance reasons.  The -l option causes any non-local node targets to be
removed from the lists.

The repository abstracts collections of files and their Distfile as a
package.  The Distfile for a package will be installed at the top level of
the repository with the name Distfile.packagename.  All files are installed
in a corresponding subdirectory called packagename.  Packages are further
broken down into filesets, which are groups of Distfile rules tagged with a
label matching the fileset name.  Dist2 accepts the argument
[package[.fileset]] so subsets of files can be distributed if desired.

Dist2 Usage

Dist2 can be invoked with the following options:

     dist2 [-v [-n]] [-w node1,node2,node3,...  | -g attr | -l] [package[.fileset]] ...
     dist_local
     dist_all [-w node1,node2,node3,...] [package[.fileset]] ...
     dist_all -l

The -v option is for debugging Distfiles.  If rdist encounters an error in
the preprocessed Distfile, it will issue an error with the offending line
number.  The -v option will cause dist2 to dump the preprocessed Distfile to
stdout.  If -n is also specified, the lines will be numbered.

It is possible to limit the nodes being updated to a subset of the nodes
appering in genders by listing the target nodes after the -w option.
Similarly, -g can be used to limit nodes to those having the specified
attribute, or -l targets only the local node.

If no package is specified, dist2 updates all nodes in the cluster.  Package
names, when specified, limit updates to only the files in the specified
packages' Distfiles.  The set of files can be further limited by appending a
.fileset to the package name.  Fileset names correspond to labels in the
package Distfile.

Two wrapper scripts exist, primarily for backwards compatibility with older
versions of genders.  dist_local just runs dist2 -l.  dist_all runs dist2 -l
on all nodes in parallel (32 at a time) using the pdsh parallel shell
command.  The -w and package[.fileset] options function as described for
dist2.  The -l option just lists the available packages on stdout.

Example: Misc Package

In this example, we will examine the misc package on the linux clusters.
Files in the top level of the repository look like this:

     slc0 # ls -F /var/dist
     Distfile.admin    Distfile.misc  VAR_DIST_IS_MOUNTED  bootstrap*  misc/
     Distfile.genders  Distfile.nqs   admin/               genders/    nqs/

Of interest to us are the misc subdirectory and the file Distfile.misc.  The
misc subdirectory contains a mixture of source and binary files which are
referenced in Distfile.misc.  They have been installed in /var/dist/misc with
the same permissions they will have at their final installed destination.

     slc0 # ls -F /var/dist/misc
     aliases.auk          krb5.conf           root.crontab.intel
     aliases.garlickhome  llnl.issue          root.crontab.slc
     aliases.intel        login.pamconf       root.profile
     aliases.slc          modules.conf.slc    root.rhosts
     cron.rdist*          ntp.conf            securetty
     fstab.net.alphadesk  ntp.conf.lc         services.add
     fstab.net.auk        ntp.conf.timelord   silo.conf
     fstab.net.intel      pam_krb5.so_alpha*  silo.conf.ws
     fstab.net.slc        pam_krb5.so_intel*  ssh_config
     genders.auk          pam_krb5.so_sparc*  sshd_config
     genders.slc          printcap            step-tickers
     hosts                profile             step-tickers.lc
     hosts.allow          rc.local*           step-tickers.timelord
     hosts.equiv          resolv.conf         syslog.conf
     inittab.cancon       rlogin.pamconf      xterm.cti
     inittab.cantty       root.crontab.auk

Distfile.misc contains the following:

     #
     # $Id: TUTORIAL,v 1.1 2003-05-14 23:50:17 achu Exp $
     # $Source: /g/g0/achu/temp/genders-cvsbackup-full/gendersllnl/dist/TUTORIAL,v $
     #

     MISCETC = (
             misc/hosts
             misc/hosts.allow
             misc/hosts.equiv
             misc/printcap
             misc/profile
             misc/resolv.conf
             misc/ssh_config
             misc/sshd_config
             misc/securetty
     )

     miscetc:  ${MISCETC} -> ${attr_all}
             install /etc;

     rc: misc/rc.local -> ${attr_all}
             install /etc/rc.d/rc.local;

     modconf: misc/modules.conf.slc -> ${slc!attr_all}
             install /etc/modules.conf;
             special "/sbin/depmod -a";

     inittab: misc/inittab.cancon -> ${auk!attr_cancon}
             install /etc/inittab;
             special "/sbin/telinit q";
     inittab: misc/inittab.cantty -> ${auk!attr_can} - ${auk!attr_cancon}
             install /etc/inittab;
             special "/sbin/telinit q";

     ti: misc/xterm.cti -> ${attr_all}
             install /usr/share/terminfo/x/xterm;

     root: misc/root.profile -> ${attr_all}
             install /root/.profile;
     root: misc/root.rhosts -> ${attr_all}
             install /root/.rhosts;

     issue: misc/llnl.issue -> ${attr_all}
             install /etc/issue;
             install /etc/issue.net;
             install /etc/motd;

     pam: misc/rlogin.pamconf -> ${attr_all}
             install /etc/pam.d/rlogin;
     pam: misc/login.pamconf -> ${attr_all}
             install /etc/pam.d/login;
     pam: misc/pam_krb5.so_alpha -> (${slc!attr_all} ${alphadesk!attr_all})
             install /lib/security/pam_krb5.so;
     pam: misc/pam_krb5.so_intel -> ${intel!attr_all}
             install /lib/security/pam_krb5.so;
     pam: misc/pam_krb5.so_sparc -> ${auk!attr_all}
             install /lib/security/pam_krb5.so;
     pam: misc/krb5.conf -> ${attr_all}
             install /etc/krb5.conf;

     ntp: misc/step-tickers -> ${attr_all}
             install /etc/ntp/step-tickers;

     ntp: misc/ntp.conf -> ${attr_all}
             install /etc/ntp.conf;
             special "/etc/rc.d/init.d/xntpd restart";

     syslog: misc/syslog.conf -> ${attr_all}
             install /etc/syslog.conf;
             special "/etc/rc.d/init.d/syslog restart";

     # machines with special aliases files for local delivery
     MISC_ALIASES_HOME = (${attr_garlickhome})

     aliases: misc/aliases.slc -> ${slc!attr_all} - ${MISC_ALIASES_HOME}
             install /etc/aliases;
             special "/usr/bin/newaliases";
     aliases: misc/aliases.auk -> ${auk!attr_all} - ${MISC_ALIASES_HOME}
             install /etc/aliases;
             special "/usr/bin/newaliases";
     aliases: misc/aliases.intel -> ${intel!attr_all} - ${MISC_ALIASES_HOME}
             install /etc/aliases;
             special "/usr/bin/newaliases";
     aliases: misc/aliases.garlickhome -> ${attr_garlickhome}
             install /etc/aliases;
             special "/usr/bin/newaliases";

     crontab: misc/root.crontab.slc -> ${slc!attr_all}
             install /etc/crontab;
             special "/usr/bin/crontab /etc/crontab";
     crontab: misc/root.crontab.auk -> ${auk!attr_all}
             install /etc/crontab;
             special "/usr/bin/crontab /etc/crontab";
     crontab: misc/root.crontab.intel -> ${intel!attr_all}
             install /etc/crontab;
             special "/usr/bin/crontab /etc/crontab";
     crontab: misc/cron.rdist -> ${attr_all}
             install /etc/cron.hourly/cron.rdist;

     lilo: misc/silo.conf -> ${auk!attr_all} - ${auk!attr_ws}
             install /etc/silo.conf;
             special "/sbin/silo";
     lilo: misc/silo.conf.ws -> ${auk!attr_ws}
             install /etc/silo.conf;
             special "/sbin/silo";

     fstab: misc/fstab.net.auk -> ${auk!attr_all}
             install /etc/fstab.net;
             special "if [ -x /admin/scripts/updatefstab ]; then /admin/scripts/updatefstab; else rm /etc/fstab.net; fi";
     fstab: misc/fstab.net.intel -> ${intel!attr_all}
             install /etc/fstab.net;
             special "if [ -x /admin/scripts/updatefstab ]; then /admin/scripts/updatefstab; else rm /etc/fstab.net; fi";
     fstab: misc/fstab.net.slc -> ${slc!attr_all}
             install /etc/fstab.net;
             special "if [ -x /admin/scripts/updatefstab ]; then /admin/scripts/updatefstab; else rm /etc/fstab.net; fi";
     fstab: misc/fstab.net.alphadesk -> ${alphadesk!attr_all}
             install /etc/fstab.net;
             special "if [ -x /admin/scripts/updatefstab ]; then /admin/scripts/updatefstab; else rm /etc/fstab.net; fi";

     services: misc/services.add -> ${attr_all}
             install /etc/services.add;
             special "if [ -x /admin/scripts/updateservices ]; then /admin/scripts/updateservices; else rm /etc/services.add; fi";

This repository is NFS mounted on four clusters: slc, auk, intel, and
alphadesk.  First look at the miscetc: label.  The associated rule sends the
files in the ${MISCETC} list to the /etc directory on all nodes, all
clusters.  Put another way, the dist2 will send those files to all nodes in
the local cluster no matter what cluster it executes on.

Next look at the inittab: rules.  There are two versions of inittab going to
two different sets of nodes in the auk cluster.  The first is for nodes with
the cancon attribute (it runs a getty on the can console device) and has the
regular console tty commented out).  The other is for nodes that have a can
device, but do not use it for a console (it runs a getty on the can console
device, but leaves the other console gettys running).  All of these rules
have variables prefixed with the auk cluster name.  On other clusters, the
rules do nothing because the list of target hosts will be empty.

Now refer to the pam: rules.  PAM is to be updated on all clusters.
Configuration data is the same, but the shared library is different for the
different architectures.  Thus on any cluster, /etc/pam.d/rlogin and
/etc/pam.d/login will be updated from the same source file.  In contrast,
/lib/security/pam_krb5.so is installed from a different source file
depending on the architecture of the cluster (sparc, intel, or alpha).

Finally, see the fstab: and services: rules.  These rules are interesting
because they address a common problem with using rdist to update system
files.  The /etc/fstab contains filesystem entries that are local to a node,
and a set of NFS mounts that are common across a cluster.  To avoid having
rdist deal with local filesystem entries (dangerous!), only the NFS entries
are sent out in a file called /etc/fstab.net.  The special directive tells
rdist to run the updatefstab script whenever /etc/fstab.net is updated.  This
script reads both local and NFS fstab files, merges them, and writes the
result on /etc/fstab.  Similarly, the services: rule sends out
/etc/services.add and runs updateservices to merge this with /etc/services.

Example: Genders Package

The genders and clusters files are excellent candidates for sending out with
dist2, but there is a possible race condition since the genders and clusters
files are used by dist2.  You need to be aware that, to get around this,
dist2 reads the genders file directly from the repository at hard coded
paths in a package called genders, as shown below:

     slc0 # ls -F /var/dist
     Distfile.admin    Distfile.misc  VAR_DIST_IS_MOUNTED  bootstrap*  misc/
     Distfile.genders  Distfile.nqs   admin/               genders/    nqs/

The clusters file must be called simply clusters and the genders files must
be called genders.clustername:

     slc0 # ls -F /var/dist/genders
     clusters  genders.alphadesk  genders.auk  genders.intel  genders.slc

The Distfile.genders then contains:

     #
     # $Id: TUTORIAL,v 1.1 2003-05-14 23:50:17 achu Exp $
     # $Source: /g/g0/achu/temp/genders-cvsbackup-full/gendersllnl/dist/TUTORIAL,v $
     #
     genders: genders/genders.auk -> ${auk!attr_all}
             install /admin/etc/genders;
     genders: genders/genders.slc -> ${slc!attr_all}
             install /admin/etc/genders;
     genders: genders/genders.intel -> ${intel!attr_all}
             install /admin/etc/genders;
     genders: genders/genders.alphadesk -> ${alphadesk!attr_all}
             install /admin/etc/genders;

Bootstrapping Rdist on a New Node

When a new node is brought online that has never been under rdist control,
it is necessary to run a few manual tasks to make it possible to run the
first dist_local.  Assuming the repository has been mounted on /var/dist, the
following script (written for linux) takes care of installing the minimum
set of files onto the node:

     #
     # $Id: TUTORIAL,v 1.1 2003-05-14 23:50:17 achu Exp $
     # $Source: /g/g0/achu/temp/genders-cvsbackup-full/gendersllnl/dist/TUTORIAL,v $
     #
     if [ $# -ne 1 ]; then
             echo Usage: bootstrap.sh clustername
             exit 1
     fi
     CLUSTER=$1

     umask 022
     mkdir -p /admin/lib /admin/scripts /admin/etc /admin/scripts /admin/bin
     install -m 444 genders/genders.$CLUSTER /admin/etc/genders
     install -m 555 admin/scripts/dist2 /admin/scripts
     install -m 555 admin/scripts/dist_local /admin/scripts
     ln -s /usr/bin/perl /admin/bin/perl

After this script finishes, run dist_local and the node is up to date.

Bootstrapping Rdist on a New Cluster

To bring up a new cluster, the following tasks must be completed:

  1.  If not already done, set up the rdist repository in /var/dist.  It
     should minimally contain an empty file called VAR_DIST_IS_MOUNTED, the
     genders package, and the admin package (containing at least the files
     needed by the node bootstrap script above).  The repository need only be
     mounted on one node at first.
  2.  The genders package should contain the genders file for the cluster.  
     This should be named genders.clustername.  Refer to the Genders Format
     section.
  3.  Make sure root's .rhosts file permits root on the node where the
     repository is mounted to rsh.  (Alternatively, on SP's you may want to
     modify dist2 to force rdist to use the kerberized rsh).  Rdist should
     already be installed on all the nodes.
  4.  Run the bootstrap script and dist2 -l on the repository node.
  5.  Run dist2 on the respository node to update the other nodes.

Change Control

The files stored in the rdist repository should be installed with the same
permissions they will have at their final destinations.  Because of this
requirement, it is advisable to keep files that will undergo change in a
separate directory with a Makefile that installs the file in the rdist
repository with the correct permissions.

Furthermore, it may be a good idea to use RCS or SCCS to handle change
control on these files, especially if multiple sys admins may be modifying
them as RCS/SCCS introduces locking and accountability.

The following is a Makefile that installs the linux genders files into the
rdist repository.  The source files and this Makefile are kept in
/usr/local/admin/genders:

     #
     # $Id: TUTORIAL,v 1.1 2003-05-14 23:50:17 achu Exp $
     # $Source: /g/g0/achu/temp/genders-cvsbackup-full/gendersllnl/dist/TUTORIAL,v $
     #
     PKG=    genders
     TOP=    /var/dist
     DEST=   $(TOP)/$(PKG)

     SFILES= genders.auk \
             genders.slc \
             genders.intel \
             genders.alphadesk \

     # need to be executable
     XFILES =

     FILES=  $(SFILES) $(XFILES)

     INST=   /usr/local/bin/inst -C -q

     all: $(FILES)

     install: install_dist all
             @for file in $(SFILES); do \
                     $(INST) -d $(DEST) -s $$file -o root -g system -m 444; \
             done
             @for file in $(XFILES); do \
                     $(INST) -d $(DEST) -s $$file -o root -g system -m 555; \
             done

     install_dist: Distfile.$(PKG)
             @if [ `id -u` != 0 ]; then echo You must become root first; exit 1; fi
             @if [ ! -d $(DEST) ]; then mkdir $(DEST); chmod 755 $(DEST); fi
             @$(INST) -d $(TOP) -s Distfile.$(PKG) -o root -g system -m 444

     $(FILES):
             co -l $@

Note that a program called inst is used to install the files into the rdist
repository.  This program is like a regular install program, except that it
can compare source and destination and abort the copy if they are the same.
The -C option is specifying that diff -b be used to compare text files
without regard for whitespace.  This prevents triggering unnecsesary rdist
updates when the sys admin makes the install target when not all files have
changed.

$Id: TUTORIAL,v 1.1 2003-05-14 23:50:17 achu Exp $
$Source: /g/g0/achu/temp/genders-cvsbackup-full/gendersllnl/dist/TUTORIAL,v $
